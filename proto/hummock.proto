syntax = "proto3";

package hummock;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.hummock";
option optimize_for = SPEED;

import "common.proto";

message Table {
  uint64 id = 1;
  TableMeta meta = 2;
}

message BlockMeta {
  bytes smallest_key = 1;
  uint32 offset = 2;
  uint32 len = 3;
}

message TableMeta {
  // Offsets of different blocks
  repeated BlockMeta block_metas = 1;
  bytes bloom_filter = 2;
  // Estimated size, only used on encryption or compression
  uint32 estimated_size = 3;
  uint32 key_count = 5;
  // Serve as cheap index.
  // Since table is ordered, they are exactly the first key and last key.
  // The keys are appended by timestamp.
  bytes smallest_key = 6;
  bytes largest_key = 7;
}

message Checksum {
  enum Algorithm {
    CRC32C = 0;
    XXHash64 = 1;
  }
  // For storing type of Checksum algorithm used
  Algorithm algo = 1;
  uint64 sum = 2;
}

enum LevelType {
  Nonoverlapping = 0;
  Overlapping = 1;
}

message Level {
  LevelType level_type = 1;
  repeated uint64 table_ids = 2;
}

message HummockVersion {
  repeated Level levels = 1;
}

message HummockSnapshot {
  uint64 ts = 1; // also as snapshot_id
}

message HummockContext {
  int32 identifier = 1;
  uint64 ttl = 2; //ms
}

message CreateHummockContextRequest {}

message CreateHummockContextResponse {
  common.Status status = 1;
  HummockContext hummock_context = 2;
}

message InvalidateHummockContextRequest {
  int32 context_identifier = 1;
}

message InvalidateHummockContextResponse {
  common.Status status = 1;
}

message AddTableWatermarkRequest {
  int32 context_identifier = 1;
}

message AddTableWatermarkResponse {
  common.Status status = 1;
}

message RemoveTableWatermarkRequest {
  int32 context_identifier = 1;
}

message RemoveTableWatermarkResponse {
  common.Status status = 1;
}

message AddTablesRequest {
  int32 context_identifier = 1;
  repeated Table tables = 2;
}

message AddTablesResponse {
  common.Status status = 1;
  uint64 version_id = 2;
}

message RefreshHummockContextRequest {
  int32 context_identifier = 1;
}

message RefreshHummockContextResponse {
  common.Status status = 1;
  uint64 ttl = 2; //ms
}

message PinVersionRequest {
  int32 context_identifier = 1;
}

message PinVersionResponse {
  common.Status status = 1;
  uint64 pinned_version_id = 2;
  HummockVersion pinned_version = 3;
}

message UnpinVersionRequest {
  int32 context_identifier = 1;
  uint64 pinned_version_id = 2;
}

message UnpinVersionResponse {
  common.Status status = 1;
}

message PinSnapshotRequest {
  int32 context_identifier = 1;
}

message PinSnapshotResponse {
  common.Status status = 1;
  HummockSnapshot snapshot = 2;
}

message UnpinSnapshotRequest {
  int32 context_identifier = 1;
  HummockSnapshot snapshot = 2;
}

message UnpinSnapshotResponse {
  common.Status status = 1;
}

message GetTablesRequest {
  int32 context_identifier = 1;
  HummockVersion pinned_version = 2;
}

message GetTablesResponse {
  common.Status status = 1;
  repeated Table tables = 2;
}

message LevelEntry {
  uint32 level_idx = 1;
  Level level = 2;
}

message KeyRange {
  bytes left = 1;
  bytes right = 2;
  bool inf = 3;
}

message CompactTask {
  // SSTs to be compacted, which will be removed from LSM after compaction
  repeated LevelEntry input_ssts = 1;
  // In ideal case, the compaction will generate `splits.len()` tables which have key range
  // corresponding to that in [`splits`], respectively
  repeated KeyRange splits = 2;
  // low watermark in 'ts-aware compaction'
  uint64 watermark = 3;
  // compacion output, which will be added to [`target_level`] of LSM after compaction
  repeated Table sorted_output_ssts = 4;
  // task id assigned by hummock storage service
  uint64 task_id = 5;
  // compacion output will be added to [`target_level`] of LSM after compaction
  uint32 target_level = 6;
  bool is_target_ultimate_and_leveling = 7;
}

message GetCompactionTasksRequest {
  int32 context_identifier = 1;
}

message GetCompactionTasksResponse {
  common.Status status = 1;
  CompactTask compact_task = 2;
}

message ReportCompactionTasksRequest {
  int32 context_identifier = 1;
}

message ReportCompactionTasksResponse {
  common.Status status = 1;
}

message HummockContextPinnedVersion {
  repeated uint64 version_id = 1;
}

message HummockContextPinnedSnapshot {
  repeated uint64 snapshot_id = 1;
}

message HummockTablesToDelete {
  // table id
  repeated uint64 id = 1;
}

service HummockManagerService {
  rpc CreateHummockContext(CreateHummockContextRequest) returns (CreateHummockContextResponse);
  rpc InvalidateHummockContext(InvalidateHummockContextRequest) returns (InvalidateHummockContextResponse);
  rpc RefreshHummockContext(RefreshHummockContextRequest) returns (RefreshHummockContextResponse);
  rpc PinVersion(PinVersionRequest) returns (PinVersionResponse);
  rpc UnpinVersion(UnpinVersionRequest) returns (UnpinVersionResponse);
  rpc AddTables(AddTablesRequest) returns (AddTablesResponse);
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);
  rpc AddTableWatermark(AddTableWatermarkRequest) returns (AddTableWatermarkResponse);
  rpc RemoveTableWatermark(RemoveTableWatermarkRequest) returns (RemoveTableWatermarkResponse);
  rpc GetCompactionTasks(GetCompactionTasksRequest) returns (GetCompactionTasksResponse);
  rpc ReportCompactionTasks(ReportCompactionTasksRequest) returns (ReportCompactionTasksResponse);
  rpc PinSnapshot(PinSnapshotRequest) returns (PinSnapshotResponse);
  rpc UnpinSnapshot(UnpinSnapshotRequest) returns (UnpinSnapshotResponse);
}
