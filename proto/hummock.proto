syntax = "proto3";

package hummock;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.hummock";
option optimize_for = SPEED;

import "common.proto";

message BlockMeta {
  bytes smallest_key = 1;
  uint32 offset = 2;
  uint32 len = 3;
}

message TableMeta {
  // Offsets of different blocks
  repeated BlockMeta block_metas = 1;
  bytes bloom_filter = 2;
  // Estimated size, only used on encryption or compression
  uint32 estimated_size = 3;
  uint32 key_count = 5;
  // Serve as cheap index.
  // Since table is ordered, they are exactly the first key and last key.
  // The keys are appended by timestamp.
  bytes smallest_key = 6;
  bytes largest_key = 7;
}

message Checksum {
  enum Algorithm {
    CRC32C = 0;
    XXHash64 = 1;
  }
  // For storing type of Checksum algorithm used
  Algorithm algo = 1;
  uint64 sum = 2;
}

message HummockContext {
  int32 identifier = 1;
  string group = 2;
  uint64 ttl = 3; //ms
}

message CreateHummockContextRequest {
  string group = 1;
}

message CreateHummockContextResponse {
  common.Status status = 1;
  HummockContext hummock_context = 2;
}

message InvalidateHummockContextRequest {
  int32 context_identifier = 1;
}

message InvalidateHummockContextResponse {
  common.Status status = 1;
}

message AddSstWatermarkRequest {
  int32 context_identifier = 1;
}

message AddSstWatermarkResponse {
  common.Status status = 1;
}

message RemoveSstWatermarkRequest {
  int32 context_identifier = 1;
}

message RemoveSstWatermarkResponse {
  common.Status status = 1;
}

message AddSstsRequest {
  message Sst {
    uint64 id = 1;
    string path = 2;
  }
  int32 context_identifier = 1;
  repeated Sst Ssts = 2;
}

message AddSstsResponse {
  common.Status status = 1;
}

message RefreshHummockContextRequest {
  int32 context_identifier = 1;
}

message RefreshHummockContextResponse {
  common.Status status = 1;
}

service HummockManagerService {
  rpc CreateHummockContext(CreateHummockContextRequest) returns (CreateHummockContextResponse);
  rpc InvalidateHummockContext(InvalidateHummockContextRequest) returns (InvalidateHummockContextResponse);
  rpc AddSstWatermark(AddSstWatermarkRequest) returns (AddSstWatermarkResponse);
  rpc RemoveSstWatermark(RemoveSstWatermarkRequest) returns (RemoveSstWatermarkResponse);
  rpc AddSsts(AddSstsRequest) returns (AddSstsResponse);
  rpc RefreshHummockContext(RefreshHummockContextRequest) returns (RefreshHummockContextResponse);
}
