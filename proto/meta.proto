syntax = "proto3";

package meta;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.metanode";
option optimize_for = SPEED;

import "common.proto";
import "data.proto";
import "plan.proto";
import "stream_plan.proto";

message Table {
  enum DistributionType {
    INVALID = 0;
    ALL = 1;
    KEY = 2;
  }
  plan.TableRefId table_ref_id = 1;
  string table_name = 2;
  uint32 column_count = 3;
  repeated plan.ColumnDesc column_descs = 4;
  bool is_materialized_view = 5;
  bool is_source = 6;
  bool append_only = 7;
  repeated uint32 pk_columns = 8;
  DistributionType dist_type = 9;
  map<string, string> properties = 10;
  string row_format = 11;
  string row_schema_location = 12;
  // Fields for materialized view
  repeated plan.ColumnOrder column_orders = 13;
  uint64 version = 14;
}

message Database {
  plan.DatabaseRefId database_ref_id = 1;
  string database_name = 2;
  uint64 version = 3;
}

message Schema {
  plan.SchemaRefId schema_ref_id = 1;
  string schema_name = 2;
  repeated data.DataType fields = 3;
  uint64 version = 4;
}

message EpochState {
  uint64 current_epoch = 1;
  uint64 stable_epoch = 2;
}

message SST {
  uint64 version = 1;
  uint64 sequence_start = 2;
  uint64 sequence_end = 3;
  uint64 backend_no = 4;
  string location = 5;
}

message Location {
  plan.TableRefId table_ref_id = 1;
  repeated SST ssts = 2;
  uint64 version = 3;
}

// Below for epoch service.

message GetEpochRequest {}

message GetEpochResponse {
  common.Status status = 1;
  uint64 epoch = 2;
}

service EpochService {
  rpc GetEpoch(GetEpochRequest) returns (GetEpochResponse);
}

// Below for id generator service.

message GetIdRequest {
  enum IdCategory {
    Default = 0;
    Database = 1;
    Schema = 2;
    Table = 3;
    Fragment = 4;
    HummockContext = 5;
  }
  IdCategory category = 1;
  int32 interval = 2;
}

message GetIdResponse {
  common.Status status = 1;
  int32 id = 2;
}

service IdGeneratorService {
  rpc GetId(GetIdRequest) returns (GetIdResponse);
}

// Below for catalog service.

message CreateRequest {
  uint32 node_id = 1;
  oneof CatalogBody {
    Database database = 2;
    Schema schema = 3;
    Table table = 4;
  }
}

message CreateResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message DropRequest {
  uint32 node_id = 1;
  oneof CatalogId {
    plan.DatabaseRefId database_id = 2;
    plan.SchemaRefId schema_id = 3;
    plan.TableRefId table_id = 4;
  }
}

message DropResponse {
  common.Status status = 1;
}

message GetCatalogRequest {
  uint32 node_id = 1;
}

message Catalog {
  repeated Database databases = 1;
  repeated Schema schemas = 2;
  repeated Table tables = 3;
}

message GetCatalogResponse {
  common.Status status = 1;
  Catalog catalog = 2;
}

service CatalogService {
  rpc GetCatalog(GetCatalogRequest) returns (GetCatalogResponse);
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Drop(DropRequest) returns (DropResponse);
}

// Below for heartbeat.
message HeartbeatRequest {
  uint32 node_id = 1;
  ClusterType cluster_type = 2;
}

message HeartbeatResponse {
  common.Status status = 1;
  oneof Body {
    Catalog catalog = 2;
  }
}

service HeartbeatService {
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// Below for stream manager.
message TableFragments {
  plan.TableRefId table_ref_id = 1;
  repeated uint32 fragment_ids = 2;
}

message FragmentLocation {
  common.WorkerNode node = 1;
  repeated stream_plan.StreamFragment fragments = 2;
}

message AddFragmentsToNodeRequest {
  FragmentLocation location = 1;
}

message AddFragmentsToNodeResponse {
  common.Status status = 1;
}

message LoadAllFragmentsRequest {}

message LoadAllFragmentsResponse {
  common.Status status = 1;
  repeated FragmentLocation locations = 2;
}

service StreamManagerService {
  rpc AddFragmentsToNode(AddFragmentsToNodeRequest) returns (AddFragmentsToNodeResponse);
  rpc LoadAllFragments(LoadAllFragmentsRequest) returns (LoadAllFragmentsResponse);
}

// Below for cluster management.
// We assume only two clusters exist: OLAP, streaming.
// Potentially we can add FE cluster into the cluster management as well.

enum ClusterType {
  Frontend = 0;
  ComputeNode = 1;
  Unknown = 2;
}

message AddWorkerNodeRequest {
  ClusterType cluster_type = 1;
  common.HostAddress host = 2;
}

message AddWorkerNodeResponse {
  common.Status status = 1;
  common.WorkerNode node = 2;
}

message DeleteWorkerNodeRequest {
  ClusterType cluster_type = 1;
  common.WorkerNode node = 2;
}

message DeleteWorkerNodeResponse {
  common.Status status = 1;
}

message ListAllNodesRequest {
  ClusterType cluster_type = 1;
}

message ListAllNodesResponse {
  common.Status status = 1;
  repeated common.WorkerNode nodes = 2;
}

service ClusterService {
  rpc AddWorkerNode(AddWorkerNodeRequest) returns (AddWorkerNodeResponse);
  rpc DeleteWorkerNode(DeleteWorkerNodeRequest) returns (DeleteWorkerNodeResponse);
  rpc ListAllNodes(ListAllNodesRequest) returns (ListAllNodesResponse);
}
