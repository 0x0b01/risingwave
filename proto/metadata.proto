syntax = "proto3";

package metadata;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.metadata";
option optimize_for = SPEED;

import "data.proto";
import "plan.proto";
import "google/protobuf/any.proto";

message ColumnTable {
  plan.TableRefId table_ref_id = 1;
  uint32 column_count = 2;
  string table_name = 3;
  uint64 version = 4;
}

message RowTable {
  plan.TableRefId table_ref_id = 1;
  repeated plan.ColumnDesc columns = 2;
  repeated uint32 pk_columns = 3;
  uint64 version = 4;
}

message Database {
  plan.DatabaseRefId database_ref_id = 1;
  string database_name = 2;
  uint64 version = 3;
}

message Schema {
  plan.SchemaRefId schema_ref_id = 1;
  string schema_name = 2;
  repeated data.DataType fields = 3;
  uint64 version = 4;
}

message Cluster {
  message Node {
    uint32 id = 1;
  }
  uint32 id = 1;
  repeated Node nodes = 2;
  map<string, string> config = 3;
}

message EpochState {
  uint64 current_epoch = 1;
  uint64 stable_epoch = 2;
}

message SST {
  uint64 version = 1;
  uint64 sequence_start = 2;
  uint64 sequence_end = 3;
  uint64 backend_no = 4;
  string location = 5;
}

message Location {
  plan.TableRefId table_ref_id = 1;
  repeated SST ssts = 2;
  uint64 version = 3;
}

message GetEpochRequest {}

message GetEpochResponse {
  uint64 epoch = 1;
}

service EpochService {
  rpc GetEpoch(GetEpochRequest) returns (GetEpochResponse);
}

message GetIdRequest {}

message GetIdResponse {
  int32 id = 1;
}

service IdGeneratorService {
  rpc GetId(GetIdRequest) returns (GetIdResponse);
}

enum CatalogType {
  DATABASE = 0;
  SCHEMA = 1;
  ROW_TABLE = 2;
  COLUMN_TABLE = 3;
}

message CreateRequest {
  uint32 node_id = 1;
  CatalogType catalog_type = 2;
  // body for different catalog type:
  // Database/Schema/RowTable/ColumnTable.
  google.protobuf.Any body = 3;
}

message CreateResponse {
  uint64 version = 1;
}

message DropRequest {
  uint32 node_id = 1;
  CatalogType catalog_type = 2;
  // body for different catalog type:
  // DatabaseRefId/SchemaRefId/TableRefId/TableRefId.
  google.protobuf.Any body = 3;
}

message GetCatalogRequest {
  uint32 node_id = 1;
}
message GetCatalogResponse {
  repeated Database databases = 1;
  repeated Schema schemas = 2;
  repeated ColumnTable column_tables = 3;
  repeated RowTable row_tables = 4;
  uint64 watermark = 5;
}

message DropResponse {}

service CatalogService {
  rpc GetCatalog(GetCatalogRequest) returns (GetCatalogResponse);
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Drop(DropRequest) returns (DropResponse);
}

message HeartbeatRequest {
  enum NodeType {
    FRONTEND = 0;
    BACKEND = 1;
  }
  uint32 node_id = 1;
  NodeType node_type = 2;
}

message HeartbeatResponse {
  //
  google.protobuf.Any body = 1;
}

service HeartbeatService {
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}
