syntax = "proto3";

package task_service;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.computenode";
option optimize_for = SPEED;

import "common.proto";
import "data.proto";
import "plan.proto";

message QueryId {
  string trace_id = 1;
}

message StageId {
  QueryId query_id = 1;
  uint32 stage_id = 2;
}

message TaskId {
  StageId stage_id = 1;
  uint32 task_id = 2;
}

message TaskSinkId {
  TaskId task_id = 1;
  uint32 sink_id = 2;
}

message TaskInfo {
  enum TaskStatus {
    NOT_FOUND = 0;
    PENDING = 1;
    RUNNING = 2;
    FAILING = 3;
    CANCELLING = 4;
    FINISHED = 5;
    FAILED = 6;
  }
  TaskId task_id = 1;
  TaskStatus task_status = 2;
}

message ExchangeSource {
  TaskSinkId sink_id = 1;
  common.HostAddress host = 2;
}

message ExchangeNode {
  message Field {
    // TODO: Add field name
    data.DataType data_type = 1;
  }
  repeated ExchangeSource sources = 1;
  // An exchange only links to one stage, but a stage could be
  // linked by multiple exchanges.
  StageId source_stage_id = 2;
  repeated Field input_schema = 3;
}

message MergeSortExchangeNode {
  ExchangeNode exchange_node = 1;
  repeated plan.ColumnOrder column_orders = 2;
}

message CreateTaskRequest {
  TaskId task_id = 1;
  plan.PlanFragment plan = 2;
}

message CreateTaskResponse {
  common.Status status = 1;
}

message AbortTaskRequest {
  TaskId task_id = 1;
  bool force = 2;
}

message AbortTaskResponse {
  common.Status status = 1;
}

message GetTaskInfoRequest {
  TaskId task_id = 1;
}

message GetTaskInfoResponse {
  common.Status status = 1;
  TaskInfo task_info = 2;
}

message GetDataResponse {
  common.Status status = 1;
  data.DataChunk record_batch = 2;
}

message GetStreamRequest {
  uint32 up_fragment_id = 1;
  uint32 down_fragment_id = 2;
}

service TaskService {
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);
  rpc GetTaskInfo(GetTaskInfoRequest) returns (GetTaskInfoResponse);
  rpc AbortTask(AbortTaskRequest) returns (AbortTaskResponse);
}

message GetDataRequest {
  TaskSinkId sink_id = 1;
}

service ExchangeService {
  rpc GetData(GetDataRequest) returns (stream GetDataResponse);
  rpc GetStream(GetStreamRequest) returns (stream data.StreamMessage);
}
