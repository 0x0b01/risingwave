syntax = "proto3";

package stream_service;

option java_multiple_files = true;
option java_package = "com.risingwave.proto.streaming.streamnode";
option optimize_for = SPEED;

import "common.proto";
import "stream_plan.proto";
import "task_service.proto";

// Describe the fragments which will be running on this node
message UpdateFragmentRequest {
  uint32 request_id = 1;
  repeated stream_plan.StreamFragment fragment = 2;
}

message UpdateFragmentResponse {
  common.Status status = 1;
}

// Encode which host machine an actor resides.
message ActorInfo {
  uint32 fragment_id = 1;
  task_service.HostAddress host = 2;
}

message BroadcastActorInfoTableRequest {
  repeated ActorInfo info = 1;
}

// Create channels and gRPC connections for a fragment
message BuildFragmentRequest {
  uint32 request_id = 1;
  repeated uint32 fragment_id = 2;
}

message BuildFragmentResponse {
  uint32 request_id = 1;
  repeated uint32 fragment_id = 2;
}

// Before starting streaming, the leader node broadcast the actor-host table to needed workers.
message BroadcastActorInfoTableResponse {
  common.Status status = 1;
}

service StreamService {
  rpc UpdateFragment(UpdateFragmentRequest) returns (UpdateFragmentResponse);
  rpc BuildFragment(BuildFragmentRequest) returns (BuildFragmentResponse);
  rpc BroadcastActorInfoTable(BroadcastActorInfoTableRequest) returns (BroadcastActorInfoTableResponse);
}

// TODO: Lifecycle management for actors.
