# Some data in this file will be overwritten by `*-override.yml`. Please run `generate.sh` to update the corresponding files.

name:

on:

env:
  RUST_TOOLCHAIN: nightly-2021-11-30

jobs:
  frontend-check:
    name: frontend-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run java style check and tests
        run: |
          make java_check java_coverage_report

      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: java
          flags: java

  end-to-end:
    name: e2e-test
    needs:
      - start-runner # required to start the main job when the runner is ready
      - compute-node-build
      - frontend-check
      - compute-node-test
    runs-on: ubuntu-latest
    timeout-minutes: 15 # NOTE: Increase this number when we have more tests.
    env:
      PG_PORT: 5432
      RW_PORT: 4567
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # For source testing.
      - name: Setup kafka cluster
        run: ./scripts/source/start_kafka.sh

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/setup-go@v2
        with:
          go-version: "1.13"

      # Install latest postgresql client, our tests requires 14.1+
      - name: Install postgres client
        run: |
          sudo apt-get update -yy
          sudo apt-get install --upgrade -yy postgresql

      - name: Build sqllogictest
        run: |
          make sqllogictest

      - uses: actions/download-artifact@v2
        with:
          name: compute-node
          path: ./rust/target/debug

      - uses: actions/download-artifact@v2
        with:
          name: meta-node
          path: ./rust/target/debug

      - uses: actions/download-artifact@v2
        with:
          name: risingwave_regress_test
          path: ./rust/target/debug
        
      - name: Build java frontend
        run: make java_build

      - name: Run tests on Postgresql
        run: |
          python3 ./scripts/sqllogictest.py -p ${{ env.PG_PORT }} -f ./e2e_test/batch/

      - name: Run 3-node end-to-end tests (batch)
        run: |
          sleep 5
          chmod +x ./rust/target/debug/compute-node
          chmod +x ./rust/target/debug/meta-node
          ./scripts/start_cluster.sh 3
          python3 ./scripts/sqllogictest.py -p ${{ env.RW_PORT }} -db dev -f ./e2e_test/batch/

      - name: Run 3-node regress tests (batch)
        run: |
          sleep 5
          chmod +x ./rust/target/debug/compute-node
          chmod +x ./rust/target/debug/meta-node
          chmod +x ./rust/target/debug/risingwave_regress_test
          ./scripts/start_cluster.sh 3
          psql --version
          cd rust && target/debug/risingwave_regress_test -h 127.0.0.1 \
            -p ${{ env.RW_PORT }} \
            --input `pwd`/tests/regress/data \
            --output `pwd`/tests/regress/output \
            --schedule `pwd`/tests/regress/data/schedule

      - name: Run single-node end-to-end tests (streaming)
        run: |
          sleep 5
          chmod +x ./rust/target/debug/compute-node
          chmod +x ./rust/target/debug/meta-node
          ./scripts/start_cluster.sh 1
          python3 ./scripts/sqllogictest.py -p ${{ env.RW_PORT }} -db dev -f ./e2e_test/streaming/

      # - name: Run 3-node end-to-end tests (streaming)
      #   run: |
      #     sleep 5
      #     chmod +x ./rust/target/debug/compute-node
      #     chmod +x ./rust/target/debug/meta-node
      #     ./scripts/start_cluster.sh 3
      #     python3 ./scripts/sqllogictest.py -p ${{ env.RW_PORT }} -db dev -f ./e2e_test/streaming/

      - name: Run single-node end-to-end tests (source)
        run: |
          chmod +x ./rust/target/debug/compute-node
          chmod +x ./rust/target/debug/meta-node
          ./scripts/start_cluster.sh 1
          python3 ./scripts/sqllogictest.py -p ${{ env.RW_PORT }} -db dev -f ./e2e_test/source/
          ./scripts/kill_cluster.sh

      - name: Run 3-node end-to-end tests (source)
        run: |
          sleep 5
          chmod +x ./rust/target/debug/compute-node
          ./scripts/start_cluster.sh 3
          python3 ./scripts/sqllogictest.py -p ${{ env.RW_PORT }} -db dev -f ./e2e_test/source_distributed/

      - name: Show compute-nodes logs on failure
        if: ${{ failure() }}
        run: ./scripts/dump_cluster_logs.sh

      - name: Collect Java coverages
        if: ${{ success() }}
        run: |
          ./scripts/kill_cluster.sh
          cd java && ./gradlew test jacocoE2eReport

      - uses: codecov/codecov-action@v2
        if: ${{ success() }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: java
          flags: java

  start-runner:
    name: ec2-start
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.WUTAO_PAT }}
          ec2-image-id: ami-0e704ffdb6669cf91 # github-actions
          ec2-instance-type: c5.2xlarge # 8 vCPU, 16Â GB Memory, EBS
          subnet-id: subnet-59743123 # default
          security-group-id: sg-9ec32bfe # default (could have security issues)

  compute-node-build:
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    env:
      CACHE_KEY_SUFFIX: v20211214 # change this to invalidate previous cache
    container:
      image: public.ecr.aws/x5u3w5h6/risingwave-build-env:latest
      options: --security-opt seccomp=unconfined
    name: compute-node-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy

      - name: Cache Cargo home
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.CACHE_KEY_SUFFIX }}-build

      - name: Install cargo-sort
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-sort

      - name: Run rust cargo-sort check
        run: |
          make rust_cargo_sort_check

      - name: Run rust format check
        run: |
          make rust_fmt

      - name: Run rust clippy check
        run: |
          make rust_check

      - name: Build compute-node and meta-node
        run: make rust_build

      - uses: actions/upload-artifact@v2
        with:
          name: compute-node
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          path: |
            rust/target/debug/compute-node

      - uses: actions/upload-artifact@v2
        with:
          name: meta-node
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          path: |
            rust/target/debug/meta-node
      
      - uses: actions/upload-artifact@v2
        with:
          name: risingwave_regress_test
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          path: |
            rust/target/debug/risingwave_regress_test
      

  compute-node-test:
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    env:
      CACHE_KEY_SUFFIX: v20211214 # change this to invalidate previous cache
    container:
      image: public.ecr.aws/x5u3w5h6/risingwave-build-env:latest
      options: --security-opt seccomp=unconfined
    name: compute-node-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Cache Cargo home
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target_tarpaulin/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.CACHE_KEY_SUFFIX }}-test

      - name: Install cargo-tarpaulin
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-tarpaulin

      - name: Run rust test with coverage
        run: |
          make rust_test_with_coverage

      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: rust
          flags: rust

  misc-check:
    runs-on: ubuntu-latest
    name: misc-check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz && sudo mv ${BINARY} /usr/bin/yq
        env:
          VERSION: v4.16.1
          BINARY: yq_linux_amd64
      - name: Check CI workflows are up-to-date
        run: |
          ./.github/workflow-template/generate.sh --check

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: java # we assume java folder has no script. gradle wrapper also won't pass shellcheck.

  stop-runner:
    name: ec2-stop
    needs:
      - start-runner # required to get output from the start-runner job
      - compute-node-build
      - compute-node-test
      # The following workflows are not running on EC2, so we don't need to wait for it.
      # - frontend-check
      # - end-to-end
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.WUTAO_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
