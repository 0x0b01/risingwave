/// Test iterator stores a buffer of key-value pairs `Vec<(Bytes, Bytes)>` and yields the data
/// stored in the buffer.
pub struct TestIterator;

pub mod test {
    use std::sync::Arc;

    pub const TEST_KEYS_COUNT: usize = 10;
    use itertools::Itertools;

    use crate::storage::{
        hummock::{
            cloud::gen_remote_table,
            table::{Table, TableBuilder, TableBuilderOptions},
            value::HummockValue,
        },
        InMemObjectStore, ObjectStore,
    };
    pub fn default_builder_opt_for_test() -> TableBuilderOptions {
        TableBuilderOptions {
            bloom_false_positive: 0.1,
            block_size: 16384,               // 16KB
            table_capacity: 256 * (1 << 20), // 256MB
        }
    }

    /// The key of an index in the test table
    pub fn test_key_of(table: usize, idx: usize) -> Vec<u8> {
        format!("{:03}_key_test_{:05}", table, idx)
            .as_bytes()
            .to_vec()
    }

    /// The value of an index in the test table
    pub fn test_value_of(table: usize, idx: usize) -> Vec<u8> {
        format!("{:03}_23332333", table)
            .as_bytes()
            .iter()
            .cycle()
            .cloned()
            .take(idx % 100 + 1) // so that the table is not too big
            .collect_vec()
    }

    pub async fn gen_test_table(table_idx: usize, opts: TableBuilderOptions) -> Table {
        gen_test_table_base(table_idx, opts, &|x| x).await
    }

    /// Generate a test table used in almost all table-related tests. Developers may verify the
    /// correctness of their implementations by comparing the got value and the expected value
    /// generated by `test_key_of` and `test_value_of`.
    pub async fn gen_test_table_base(
        table_idx: usize,
        opts: TableBuilderOptions,
        idx_mapping: &dyn Fn(usize) -> usize,
    ) -> Table {
        let mut b = TableBuilder::new(opts);

        for i in 0..TEST_KEYS_COUNT {
            b.add(
                &test_key_of(table_idx, idx_mapping(i)),
                HummockValue::Put(test_value_of(table_idx, idx_mapping(i))),
            );
        }

        // get remote table
        let (data, meta) = b.finish();
        let obj_client = Arc::new(InMemObjectStore::new()) as Arc<dyn ObjectStore>;
        gen_remote_table(obj_client, 0, data, meta, None)
            .await
            .unwrap()
    }
}
