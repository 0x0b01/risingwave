use bytes::Bytes;
use futures::Future;
use risingwave_pb::hummock::TableMeta;

use crate::hummock::key::{FullKey, Timestamp};
use crate::hummock::value::HummockValue;
use crate::hummock::TableBuilder;

/// A wrapper for [`TableBuilder`] which automatically split key-value pairs into multiple tables,
/// based on their target capacity set in options.
///
/// When building is finished, one may call `finish` to get the results of zero, one or more tables.
pub struct CapacitySplitTableBuilder<B> {
    /// When creating a new [`TableBuilder`], caller use this closure to specify the id and
    /// options.
    get_id_and_builder: B,

    /// Wrapped [`TableBuilder`]s and their ids. The last one is what we are operating on.
    builders: Vec<(u64, TableBuilder)>,
}

impl<B, F> CapacitySplitTableBuilder<B>
where
    B: FnMut() -> F,
    F: Future<Output = (u64, TableBuilder)>,
{
    /// Create a new [`CapacitySplitTableBuilder`] using given configuration generator.
    pub fn new(get_id_and_builder: B) -> Self {
        Self {
            get_id_and_builder,
            builders: Vec::new(),
        }
    }

    /// Returns the number of [`TableBuilder`]s.
    pub fn len(&self) -> usize {
        self.builders.len()
    }

    /// Returns true if no builder is created.
    pub fn is_empty(&self) -> bool {
        self.builders.is_empty()
    }

    /// Add a user key-value pair to the underlying builders, with given `timestamp`.
    ///
    /// If the current builder reaches its capacity, this function will create a new one with the
    /// configuration generated by the closure provided earlier.
    pub async fn add_user_key(
        &mut self,
        user_key: Vec<u8>,
        value: HummockValue<Vec<u8>>,
        timestamp: Timestamp,
    ) {
        assert!(!user_key.is_empty());
        let full_key = FullKey::from_user_key(user_key, timestamp);
        self.add_full_key(full_key.as_slice(), value).await;
    }

    /// Add a key-value pair to the underlying builders.
    ///
    /// If the current builder reaches its capacity, this function will create a new one with the
    /// configuration generated by the closure provided earlier.
    pub async fn add_full_key(&mut self, full_key: FullKey<&[u8]>, value: HummockValue<Vec<u8>>) {
        let new_builder_required = self
            .builders
            .last()
            .map(|(_, b)| b.reach_capacity())
            .unwrap_or(true);

        if new_builder_required {
            let (id, builder) = (self.get_id_and_builder)().await;
            self.builders.push((id, builder));
        }

        let (_, builder) = self.builders.last_mut().unwrap();
        builder.add(full_key.into_inner(), value);
    }

    /// Finalize all the tables to be ids, blocks and metadata.
    pub fn finish(self) -> Vec<(u64, Bytes, TableMeta)> {
        self.builders
            .into_iter()
            .map(|(id, builder)| {
                let (data, meta) = builder.finish();
                (id, data, meta)
            })
            .collect()
    }
}

#[cfg(test)]
mod tests {
    use std::sync::atomic::AtomicU64;
    use std::sync::atomic::Ordering::SeqCst;

    use itertools::Itertools;
    use risingwave_pb::hummock::checksum;

    use super::*;
    use crate::hummock::TableBuilderOptions;

    #[tokio::test]
    async fn test_lots_of_tables() {
        let next_id = AtomicU64::new(1001);

        let block_size = 1 << 10;
        let table_capacity = 4 * block_size;
        let get_id_and_builder = || async {
            (
                next_id.fetch_add(1, SeqCst),
                TableBuilder::new(TableBuilderOptions {
                    table_capacity,
                    block_size,
                    bloom_false_positive: 0.1,
                    checksum_algo: checksum::Algorithm::XxHash64,
                }),
            )
        };
        let mut builder = CapacitySplitTableBuilder::new(get_id_and_builder);

        for _ in 0..table_capacity {
            builder
                .add_user_key(b"key".to_vec(), HummockValue::Put(b"value".to_vec()), 233)
                .await;
        }

        let results = builder.finish();
        assert!(results.len() > 1);
        assert_eq!(results.iter().map(|p| p.0).duplicates().count(), 0);
    }
}
