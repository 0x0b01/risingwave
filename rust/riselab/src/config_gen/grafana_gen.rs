use anyhow::{anyhow, Result};

use crate::GrafanaConfig;

pub struct GrafanaGen;

impl GrafanaGen {
    pub fn gen_custom_ini(&self, config: &GrafanaConfig) -> String {
        format!(
            r#"# --- THIS FILE IS AUTO GENERATED BY RISELAB ---
[server]
http_addr = {grafana_host}
http_port = {grafana_port}

[users]
default_theme = light

[auth.anonymous]
enabled = true
org_role = Admin
    "#,
            grafana_host = config.address,
            grafana_port = config.port
        )
    }

    pub fn gen_datasource_yml(&self, config: &GrafanaConfig) -> Result<String> {
        let provide_prometheus = config.provide_prometheus.as_ref().unwrap();
        if provide_prometheus.len() != 1 {
            return Err(anyhow!(
                "expect 1 prometheus nodes, found {}",
                provide_prometheus.len()
            ));
        }
        let prometheus = &provide_prometheus[0];
        let yml = format!(
            r#"# --- THIS FILE IS AUTO GENERATED BY RISELAB ---
apiVersion: 1
deleteDatasources:
  - name: riselab-prometheus
datasources:
  - name: riselab-prometheus
    type: prometheus
    access: proxy
    url: http://{prometheus_host}:{prometheus_port}
    withCredentials: false
    isDefault: false
    tlsAuth: false
    tlsAuthWithCACert: false
    version: 1
    editable: true
    isDefault: true
    "#,
            prometheus_host = prometheus.address,
            prometheus_port = prometheus.port
        );
        Ok(yml)
    }
}
